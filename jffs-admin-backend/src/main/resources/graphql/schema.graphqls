type PaginatedWordsDTO {
    words: [WordDTO!]!,
    totalWords : Int!,
    totalPages : Int!,
    currentPage : Int!,
    nextPage : Int!,
    previousPage : Int!
}

type WordDTO {
    word: String!,
    meanings: [MeaningDTO!]!
}

input WordInput {
    word: String!,
    meanings: [MeaningInput!]!
}

enum SearchTypeInput {
    WORD
    SYNONYM
}

type MeaningDTO {
    definition: String!,
    synonyms: [String]!,
    examples: [String]!,
}

input MeaningInput {
    definition: String!,
    synonyms: [String]!,
    examples: [String]!,
}

type Mutation {
    addWord(wordInput: WordInput!) : Boolean
    updateWord(oldWord: String, wordInput: WordInput!) : Boolean
    deleteWord(word: String) : Boolean
}

type Query {
    allWords(pageNum: Int!) : PaginatedWordsDTO!
    findWord(wordInput : String!) : WordDTO
    search(searchType: SearchTypeInput, searchValue: String!) : WordDTO
}

schema {
    query: Query
    mutation: Mutation
}